// src/main.ts
import { Response } from "@remix-run/node";
import { readFile } from "fs/promises";
import path from "path";
import postcss from "postcss";
import postcssrc from "postcss-load-config";
import tailwindcss from "tailwindcss";
var defaultInputCss = `
@tailwind base;
@tailwind components;
@tailwind utilities;
`;
var cache = /* @__PURE__ */ new Map();
var defaultCacheKey = Symbol("remix-tailwind-default");
async function serveTailwindCss(cssFilePath) {
  const cacheKey = cssFilePath ? toAbsolutePath(cssFilePath) : defaultCacheKey;
  const cachedResponse = cache.get(cacheKey);
  if (process.env.NODE_ENV === "production" && cachedResponse) {
    return cssResponse(cachedResponse);
  }
  let plugins = [tailwindcss];
  let options = {
    from: cssFilePath
  };
  try {
    const postcssConfig = await postcssrc();
    plugins = postcssConfig.plugins;
    options = postcssConfig.options;
    options.from = cssFilePath || options.from;
  } catch {
  }
  const inputCss = options.from ? await readFile(options.from, "utf-8") : defaultInputCss;
  const { css } = await postcss(plugins).process(inputCss, options);
  if (process.env.NODE_ENV === "production") {
    cache.set(cacheKey, css);
  }
  return cssResponse(css);
}
function cssResponse(css) {
  return new Response(css, {
    headers: { "content-type": "text/css" }
  });
}
function toAbsolutePath(inputPath) {
  if (path.isAbsolute(inputPath)) {
    return inputPath;
  }
  return path.join(process.cwd(), inputPath);
}
function createLoader(cssFilePath) {
  return () => serveTailwindCss(cssFilePath);
}
export {
  createLoader,
  serveTailwindCss
};
