var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache2) => {
  return (module2, temp) => {
    return cache2 && cache2.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache2 && cache2.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  createLoader: () => createLoader,
  serveTailwindCss: () => serveTailwindCss
});
var import_node = __toESM(require("@remix-run/node"), 1);
var import_promises = __toESM(require("fs/promises"), 1);
var import_path = __toESM(require("path"), 1);
var import_postcss = __toESM(require("postcss"), 1);
var import_postcss_load_config = __toESM(require("postcss-load-config"), 1);
var import_tailwindcss = __toESM(require("tailwindcss"), 1);
var defaultInputCss = `
@tailwind base;
@tailwind components;
@tailwind utilities;
`;
var cache = /* @__PURE__ */ new Map();
var defaultCacheKey = Symbol("remix-tailwind-default");
async function serveTailwindCss(cssFilePath) {
  const cacheKey = cssFilePath ? toAbsolutePath(cssFilePath) : defaultCacheKey;
  const cachedResponse = cache.get(cacheKey);
  if (process.env.NODE_ENV === "production" && cachedResponse) {
    return cssResponse(cachedResponse);
  }
  let plugins = [import_tailwindcss.default];
  let options = {
    from: cssFilePath
  };
  try {
    const postcssConfig = await (0, import_postcss_load_config.default)();
    plugins = postcssConfig.plugins;
    options = postcssConfig.options;
    options.from = cssFilePath || options.from;
  } catch {
  }
  const inputCss = options.from ? await (0, import_promises.readFile)(options.from, "utf-8") : defaultInputCss;
  const { css } = await (0, import_postcss.default)(plugins).process(inputCss, options);
  if (process.env.NODE_ENV === "production") {
    cache.set(cacheKey, css);
  }
  return cssResponse(css);
}
function cssResponse(css) {
  return new import_node.Response(css, {
    headers: { "content-type": "text/css" }
  });
}
function toAbsolutePath(inputPath) {
  if (import_path.default.isAbsolute(inputPath)) {
    return inputPath;
  }
  return import_path.default.join(process.cwd(), inputPath);
}
function createLoader(cssFilePath) {
  return () => serveTailwindCss(cssFilePath);
}
module.exports = __toCommonJS(main_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createLoader,
  serveTailwindCss
});
